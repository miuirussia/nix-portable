name: "Build and test"
on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - v*
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Nix Flakes doesn't work on shallow clones
          fetch-depth: 0
          persist-credentials: true

      - name: Cache result
        uses: actions/cache@v4
        with:
          key: dist-${{ github.sha }}
          path: dist

      - name: Install nix
        uses: cachix/install-nix-action@master
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            extra-platforms = aarch64-linux

      - name: Configure cachix
        uses: cachix/cachix-action@master
        with:
          name: kdevlab-nix-portable
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          image: tonistiigi/binfmt@sha256:8de6f2decb92e9001d094534bf8a92880c175bd5dfb4a9d8579f26f09821cfa2
          platforms: all

      - name: Install binfmt support
        run: sudo apt-get install -y

      - name: Build
        run: |
          nix build -L .#release
          mkdir -p dist
          cp result/* dist/

  test:
    name: Test inside github action
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          key: dist-${{ github.sha }}
          path: dist

      - name: Test
        run: |
          export NP_DEBUG=1

          ./dist/nix-portable-x86_64 nix eval --impure --expr 'builtins.fetchGit {url="https://github.com/miuirussia/nix-portable"; rev="94b5e6c28600246a822d8b3b6f8d34603000312e";}'
          ./dist/nix-portable-x86_64 nix build --no-link -L --impure --expr '(import <nixpkgs> {}).hello.overrideAttrs(_:{change="_var_";})'
          ./dist/nix-portable-x86_64 nix-shell -p hello --run hello
          echo "All tests passed"

  pre-release:
    name: Pre-release
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          key: dist-${{ github.sha }}
          path: dist

      - name: Move latest tag
        run: |
          set -x

          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

          git push origin :refs/tags/latest
          git tag -fa latest -m "Latest pre-release"
          git push origin latest

      - name: Publish pre-release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: "latest"
          name: Development build
          generate_release_notes: true
          prerelease: true
          draft: false
          files: |
            ./dist/nix-portable-*

  cleanup:
    name: "Cleanup"
    runs-on: ubuntu-latest
    needs: pre-release

    steps:
      - name: Cleanup
        run: |
          gh cache delete $CACHE_KEY
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          CACHE_KEY: dist-${{ github.sha }}
